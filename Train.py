#Import the Libraries
import numpy as np
import pandas as pd
import os
#Load the Dataset
dataset=pd.read_csv('Dataset.csv')
dataset.head()
dataset.groupby(dataset['legitimate']).size()
X = dataset.drop(['Name','md5','legitimate'],axis=1).values
Y = dataset['legitimate'].values
import sklearn.ensemble as ek
from sklearn.feature_selection import SelectFromModel
#Selecting Important 13 Features out of total 57
extratrees = ek.ExtraTreesClassifier().fit(X,Y)
model = SelectFromModel(extratrees, prefit=True)
X_new = model.transform(X)
nbfeatures = X_new.shape[1]
nbfeatures
from sklearn.model_selection import train_test_split
#Split the Dataset
X_train, X_test, Y_train, Y_test = train_test_split(X_new, Y ,test_size=0.2)
#List of Features taken into Consideration
features = []
index = np.argsort(extratrees.feature_importances_)[::-1][:nbfeatures]
for f in range(nbfeatures):
    print("%d.) feature %s (%f)" % (f + 1, dataset.columns[2+index[f]], extratrees.feature_importances_[index[f]]))
    features.append(dataset.columns[2+f])
import sklearn.ensemble as ek
from sklearn import tree
from sklearn import linear_model
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LinearRegression
#Evaluating Performance on different types of models
model = { "RandomForest":ek.RandomForestClassifier(n_estimators=50),
        "DecisionTree":tree.DecisionTreeClassifier(max_depth=10),    
         "GradientBoosting":ek.GradientBoostingClassifier(n_estimators=50),
         "GNB":GaussianNB(),
         "LinearRegression":LinearRegression()   
}
results = {}
for algo in model:
    clf = model[algo]
    clf.fit(X_train,Y_train)
    score = clf.score(X_test,Y_test)
    #For Printing the Accuracy
    print ("%s : %s " %(algo, score))
    results[algo] = score
# For Selecting the Best Model
best_model = max(results, key=results.get)
best_model
from sklearn.metrics import confusion_matrix
import pickle
import joblib
#For Saving the Classifier model
joblib.dump(model[best_model],'classifier.pkl')
#For Saving the Features
open('features.pkl','wb').write(pickle.dumps(features))
#For calculating False Positive and False Negative Rate
clf = model[best_model]
res = clf.predict(X_new)
mt = confusion_matrix(Y, res)
print("False positive rate : %f %%" % ((mt[0][1] / float(sum(mt[0])))*100))
print('False negative rate : %f %%' % ((mt[1][0] / float(sum(mt[1])))*100))
